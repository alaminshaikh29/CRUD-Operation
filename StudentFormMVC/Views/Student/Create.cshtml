@model StudentFormMVC.Models.Students
@{
    /*dynamic property,data can be passed controller to view*/
    ViewBag.Title = "Create";
}

<h3>Create</h3>

@using (Html.BeginForm())
{
    //It verifies the tokens before accepting the request into ASP.NET MVC controller action which prevents the Cross Site Request Forgery.
    @Html.AntiForgeryToken()

    <div class="form-horizontal"></div>
    <h4>Fill out the form</h4>
    <hr />
    //ValidationSummary is used to display error message at a fixed and only place
    @Html.ValidationSummary(true)

    <div class="form-group">
        @*LabelFor is a label extension capable of displaying text on a web page.*@
        @Html.LabelFor(model => model.Name)
        <div class="col-md-20">
            @*This control is bit smart. It renders HTML markup based on the datatype of the property*@
            @Html.EditorFor(model => model.Name)
            @*ValidationMessageFor() is a strongly typed extension method. It displays a validation message if an error exists for the specified field in the ModelStateDictionary object.*@
            @Html.ValidationMessageFor(model => model.Name)

        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Email)
        <div class="col-md-10">
            @Html.EditorFor(model => model.Email)
            @Html.ValidationMessageFor(model => model.Email)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Phone)
        <div class="col-md-10">
            @Html.EditorFor(model => model.Phone)
            @Html.ValidationMessageFor(model => model.Phone)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Address)
        <div class="col-md-10">
            @Html.EditorFor(model => model.Address)
            @Html.ValidationMessageFor(model => model.Address)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Gender)
        <div class="col-md-10">
            @Html.RadioButtonFor(model => model.Gender, "Male")
            Male
            @Html.RadioButtonFor(model => model.Gender, "Female")
            Female
            @Html.RadioButtonFor(model => model.Gender, "Others")
            Others
            <div>
                @Html.ValidationMessageFor(model => model.Gender)
            </div>
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.DateOfBirth)
        <div class="col-md-10">
        @*    @Html.TextBoxFor(m => m.DateOfBirth, "{0:dd/MM/yyyy}")*@
            @Html.TextBoxFor(model => model.DateOfBirth, new { @type = "date" })
            @Html.ValidationMessageFor(model => model.DateOfBirth)
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.IsActive)
        <div class="col-md-10">
            @Html.CheckBox("IsActive", true)
            @Html.ValidationMessageFor(model => model.IsActive)
        </div>
    </div>

    <div class="form-group">
        <div>
            <input class="btn btn-dark" type="submit" value="Create" />
        </div>
    </div>
}

<div>
    @*back to list=link text,list=action method name*@
    @Html.ActionLink("Back to List", "List")
</div>
@*~/bundles/jqueryval is the virtual path of the bundle*@
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}